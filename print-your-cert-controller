#!/usr/bin/env bash

set -euo pipefail

#apiserver=$(kubectl config view --minify --flatten -ojson | jq '.clusters[0].cluster.server' -r)

kubectl get cert -ojson --watch | jq -c --unbuffered | while read -r cert; do
    annotation_value_print=$(jq -r '.metadata.annotations."print" | select(.)' <<<"$cert")
    condition_status_ready=$(jq -r '.status.conditions[]? | select(.type == "Ready") | .status' <<<"$cert")
    condition_status_printed=$(jq -r '.status.conditions[]? | select(.type == "Printed") |  .status' <<<"$cert")

    printf "%s: reconciling. (state: $annotation_value_print,$condition_status_ready,$condition_status_printed)\n" "$(jq -r .metadata.name <<<"$cert")"
    case $annotation_value_print,$condition_status_ready,$condition_status_printed in
    ,*,*)
        printf "%s: the certificate does not have the 'print' annotation, skipping.\n" "$(jq -r .metadata.name <<<"$cert")"
        continue
        ;;
    *,,*)
        printf "%s: the certificate does not have the 'Ready' condition yet, skipping.\n" "$(jq -r .metadata.name <<<"$cert")"
        continue
        ;;
    *,*,True)
        printf "%s: the certificate has already been printed, skipping.\n" "$(jq -r .metadata.name <<<"$cert")"
        continue
        ;;

    true,True,*)
        printf "%s: is ready to be printed and was not printed before.\n" "$(jq -r .metadata.name <<<"$cert")"
        pem=$(jq -r '.spec.secretName' <<<"$cert" | xargs kubectl get secret -ojson | jq -r '.data."tls.crt"' | base64 -d)

        printf "%s: printing.\n" "$(jq -r .metadata.name <<<"$cert")"

        ./pem-to-png <<<"$pem"

        brother_ql --model QL-820NWB --printer usb://0x04f9:0x209d print --label 62 --rotate 90 front.png
        #brother_ql --model QL-820NWB --printer usb://0x04f9:0x209d print --label 62 back.png

        # Now that the certificate is printed, we can update the status of
        # the certificate.
        kubectl curl -sS -k -H "Content-Type: application/json-patch+json" \
            -X PATCH http://localhost/apis/cert-manager.io/v1/namespaces/default/certificates/"$(jq -r .metadata.name <<<"$cert")"/status \
            -d '[{"op": "add", "path": "/status/conditions", "value":[{"type": "Printed", "status": "True"}]}]' >/dev/null
        continue
        ;;
    esac
done

exit 98
