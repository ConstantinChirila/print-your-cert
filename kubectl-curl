#! /bin/bash

set -e -b # The flag '-b' silences bash's job control messages.

SOCKET=/tmp/kubectl-curl-$$.sock

kubectl proxy --unix-socket "$SOCKET" >/dev/null &

# The variables $! and $SOCKET are immediately expanded so that we know
# which process to kill in the trap.
# shellcheck disable=SC2064
trap "trap - SIGTERM && kill $! && rm -f $SOCKET" SIGINT SIGTERM EXIT

while ! curl --unix-socket "$SOCKET" --fail http://localhost -o /dev/null >/dev/null 2>&1; do
    sleep 0.01
done

curl --unix-socket "$SOCKET" "$@"

# read -r MIN MAX <(awk '{print $1, $2}' /proc/sys/net/ipv4/ip_local_port_range)
# while :; do
#     PORT="$(shuf -i "$MIN-$MAX" -n 1)"
#     ss -lpn | grep -q ":$PORT " || break
# done
# SERVER=$(kubectl config view --minify -ojson | jq '.clusters[].cluster.server' -r)
# kubectl config view --minify -ojson | jq '.clusters[].cluster.certificate-authority-data' -r | base64 -d >/tmp/kubectl-curl-ca.crt
# kubectl config view --minify -ojson | jq '.users[].user.client-certificate-data' -r | base64 -d >/tmp/kubectl-curl-client.crt
# kubectl config view --minify -ojson | jq '.users[].user.client-key-data' -r | base64 -d >/tmp/kubectl-curl-client.key
# curl --cacert /tmp/kubectl-curl-ca.crt --cert <(cat /tmp/kubectl-curl-client.crt /tmp/kubectl-curl-client.key) "$@"
